/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;

import java.io.*;
import recovery.*;
import syntacticTree.*;

public class Fun
{
  boolean MenosShort = false;
  int contParseError = 0;
  Token lastError = null;

  public static void main(String args []) throws ParseException
  {
    String filename = "";
    Fun parser;
    boolean ms = false;
    String intro_msg = "Trabalho de Introdução a Compiladores. ";
    String modo_padrao_msg = "Fun está operando em modo padrão.";
    String modo_arquivo_msg = "Fun está operando em modo leitura de arquivo.";
    String input_msg = "Insira o valor que deseja validar (Para sair Ctrl+C)";
    String usage_msg = "Uso : -short <path/do/arquivo> \n Pode ser utilizado sem parametros para modo de input de valores";
    String file_not_found_msg = "Arquivo não foi localizado, favor verificar se está correto";
    String reading_file_msg = "Lendo o arquivo : ";
    String lexical_error_msg = " erros lexicos foram encontrados";
    boolean debug = false;
    int i = 0;

    System.out.println(intro_msg);

    if (args.length == 0)
    {
      System.out.println(modo_padrao_msg);
      parser = new Fun(System.in);
      parser.MenosShort = false;
      System.out.println(input_msg);
      try
      {
        parser.program();
        lexError(lexical_error_msg, parser.token_source.foundLexError());
      }
      catch (Exception ex)
      {
        System.err.println(ex);
        System.exit(0);
      }
    }
    else
    {
        // Imprimi mensagem de auxilio (Usage Message)
        if ( args.length == 1)
        {
            System.out.println(usage_msg);
            System.exit(0);
        }
        // TODO : Assume que apenas 1 arquivo será passado por vez,
        //        melhorar os argumentos para tratar multiplos arquivos.
        else
        {

            for (i = 0; i < args.length - 1; ++i)
            {
                if (args[i].toLowerCase().equals("-short"))
                {
                    ms = true;
                }
                else if( args[i].toLowerCase().equals("-debug_as"))
                {
                    debug = true;
                }
                else
                {
                    System.out.println(usage_msg);
                    System.exit(0);
                }
            }
            filename = args[i];
            System.out.println(reading_file_msg + filename);
            try {
                parser = new Fun(new java.io.FileInputStream(filename));
                parser.MenosShort = ms;
                if (!debug)
                {
                    parser.disable_tracing(); // desabilita verbose do AS
                }

                ListNode root = null;

                // Infelizmente este foi o unico jeito de garantir que parser vai existir dentro do catch que
                // incrementa parser.contParseError.
                try
                {

                    root = parser.program();

                }
                catch (ParseEOFException ex)
                {
                    System.err.println(ex.getMessage());
                    parser.contParseError = 1;
                }
                finally
                {
                    lexError(lexical_error_msg, parser.token_source.foundLexError());
                    System.out.println(parser.contParseError + " Erro sintatico encontrado");
                }
            }
            catch (java.io.FileNotFoundException e)
            {
                System.out.println(file_not_found_msg);
                System.exit(0);
            }
        }
    }
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try
    {
      s = s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException ex)
    {
        System.out.println(ex);
        System.exit(0);
    }

    return s;
  }

  static public void lexError(String msg, int errorCount)
  {
      String program_success_msg = "O programa foi corretamente analisado";

      if (errorCount != 0)
      {
        System.out.println(errorCount + msg);
      }
      else
      {
        System.out.println(program_success_msg);
      }
  }

boolean eof;

void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
{
  	Token tok;

	if (g==null)
	    throw e;
	tok = getToken(1);

	while (!eof) {
	  if (g.contains(tok.kind)) {
	    break;
	  }
	  getNextToken();
	  tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) )
	  	eof = true;
	  }
	System.out.println(e.getMessage());
	contParseError++;

	if ( tok != lastError)
    {
         System.out.println(e.getMessage());
         lastError = tok;
         contParseError++;  // incrementa número de erros
    }

	if ( eof )
	 throw new ParseEOFException("EOF found prematurely.");
}

}
PARSER_END(Fun)

TOKEN_MGR_DECLS:
{
    int countLexError = 0;

    public int foundLexError()
    {
        return countLexError;
    }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

SKIP:
{
  "/*" : MULTICOMMENTMODE
}

SKIP:
{
  "//" : SINGLECOMMENTMODE
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < ASSIGN : "=" >
| < DIVIDE : "/" >
| < NOT : "!" | "not" | "NOT" >
| < AND : "&&" | "and" | "AND" >
| < OR : "||" | "or" | "OR" >
| < XOR : "^" | "xor" | "XOR" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE: "<=">
| < GE: ">=">
| < NEQ : "!=" | "><" >
| < REM : "%" >
}

TOKEN :
{
  < FLOAT : "float" >
| < BOOLEAN : "boolean" >
| < CHAR : "char" >
| < STRING : "string" >
| < INTEGER : "int" >
| < BREAK : "break" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN : "return" >
| < SUPER : "super" >
| < IF : "if" >
| < ELSE : "else" >
| < FOR : "for" >
| < NEW : "new" >
| < FLUSH : "flush" >
| < CONSTRUCTOR : "constructor" >
| < CLASS : ( "class" ) >
| < EXTENDS : ( "extends" ) >
| < VOID : ("void") >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN :
{
      < float_constant : ( ("-")? ( (["0"-"9"])+ "." (["0"-"9"])+) ) >
    | < integer_constant : ( ("-")? (["0"-"9"])+ ) >
    | < boolean_constant : "true" | "false" | "True" | "False" >
    | < char_constant : "\'" ( ["A"-"Z"] | ["a"-"z"]
                        |  ["0"-"9"] | <VALIDSYMBOLS>
                        | ("\\""n") | ("\\""t") | ("\\""r") | ("\\""f") | ("\"") )
                          "\'">
    | < string_constant : "\"" ( ["A"-"Z"] | ["a"-"z"]
                        | ["0"-"9"] | <VALIDSYMBOLS>
                        | ("\\""t") | ("\\""f") | ("\'")
                        )+ "\"" >
    | < null_constant : "null" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < IDENT: ( <LETTER> (<LETTER> | <DIGIT> )* )>
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER: ["A"-"Z", "a"-"z"] >
| < #VALIDSYMBOLS : ["a"-"z", "A"-"Z", "0"-"9", "(", ")",
                     "[", "]", "{", "}", ";", ",", ".", "=",
                     ">", "<", "!", "+", "-", "*", "/", "%", " ", "$", "^"] >
}

// Item 2
<MULTICOMMENTMODE> SKIP:
{
  "*/" : DEFAULT
  | <~[]>
}

<SINGLECOMMENTMODE> SKIP:
{
  <["\n","\r"]> : DEFAULT
  | <~[]>  

}

// Item 3
SPECIAL_TOKEN :
{
     <INVALID_LEXICAL:(~ ["a"-"z", "A"-"Z", "0"-"9", "\"", "\'", "(",
                         ")", "[", "]", "{", "}", ";", ",", ".", "=",
                         ">", "<", "!", "+", "-", "*", "/", "%", " ", "\t",
                         "\n", "\r", "\f"] )+ >
     {
        System.err.println("Line " + input_stream.getEndLine() + " - String invalida encontrada: " + image);
        countLexError++;
     }
|    <INVALID_CONST: ("\"" (~ ["\n", "\r", "\""])* ["\n","\r"] ) >
     {
        System.err.println("Line " + input_stream.getEndLine() + " - String constante tem " + image + " seguido de \\n: ");
        countLexError++;
     }
|    <INVALID_CHAR: ("\'" (~ ["\n", "\r", "\'"])* ["\n","\r"] ) >
     {
        System.err.println("Line " + input_stream.getEndLine() + " - Char constante tem " + image + " seguido de \\n");
        countLexError++;
     }
|    <INVALID_FLOAT: ("-")? ( "." <DIGIT> | <DIGIT> ".") >
     {
        System.err.println("Line " + input_stream.getEndLine() + " Não é um valor Float valido : " + image);
        countLexError++;
     }
|    <INVALID_LINE_BREAK: ("\"" ((<LETTER> | <DIGIT> )* (("\\""n") | ("\\""r"))  (<LETTER> | <DIGIT> )*) "\"") >
     {
        System.err.println("Line " + input_stream.getEndLine() + " Não pode existir quebra de linha no meio de string. ");
        countLexError++;
     }
|    <INVALID_EMPTY_STRING: ("\""){2} >
     {
        System.err.println("Line " + input_stream.getEndLine() + " Não pode existir string vazia.");
        countLexError++;
     }
|    <INVALID_EMPTY_CHAR: ("\'"){2} >
     {
        System.err.println("Line " + input_stream.getEndLine() + " Não pode existir char vazio.");
        countLexError++;
     }
|    <INVALID_SYMBOL_STRING: ("\"" (<INVALID_LEXICAL> | <LETTER> | <DIGIT> )*  "\"") >
     {
              System.err.println("Line " + input_stream.getEndLine() + " Character invalido dentro da string " + image);
              countLexError++;
     }
|    <INVALID_SYMBOL_CHAR: ("\'" <INVALID_LEXICAL> "\'") >
     {
        System.err.println("Line " + input_stream.getEndLine() + " Character invalido " + image);
        countLexError++;
     }
}

ListNode classlist(RecoverySet g) throws ParseEOFException :
{
    ClassDeclNode c = null;
    ListNode l = null;

    RecoverySet f = First.classlist.union(g);
}
{
(
    c = classdecl(f) [ l = classlist(g) ]
) { return new ListNode(c, l);}
}

ClassDeclNode classdecl(RecoverySet g) throws ParseEOFException :
{
    Token t = null, n = null, e1 = null;
    ClassBodyNode c = null;
}
{
    try {
        t = <CLASS>  n = <IDENT> [ <EXTENDS> e1 = <IDENT> ] c = classbody(g)
        { return new ClassDeclNode(t, n, e1, c); }
}
catch (ParseException e)
{
    consumeUntil(g, e, "classdecl");
    return new ClassDeclNode(t, n, e1, c);
}
}



ClassBodyNode classbody(RecoverySet g) throws ParseEOFException :
{
ListNode c = null,
         v = null,
         ct = null,
         m = null;
VarDeclNode vd;
ConstructDeclNode cd;
MethodDeclNode md;
Token t = null;

RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
            f3 = First.methoddecl.union(g).remove(IDENT),
            f4 = First.constructdecl.union(f3).remove(IDENT),
            f5 = First.vardecl.union(f4).remove(IDENT);
}
{
try {
   t = <LBRACE>
      [c = classlist(f5)]
      (LOOKAHEAD(3) vd = vardecl(f2) <SEMICOLON>
        { if ( v == null)
              v = new ListNode(vd);
          else
              v.add(vd);
        }
      )*
      (cd = constructdecl(f4)
        { if ( ct == null)
              ct = new ListNode(cd);
          else
              ct.add(cd);
        }
      )*
      (md = methoddecl(f3)
        { if ( m == null)
              m = new ListNode(md);
          else
              m.add(md);
        }
      )*
   <RBRACE>
   { return new ClassBodyNode(t, c, v, ct, m); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "classbody");
   return new ClassBodyNode(t, c, v, ct, m);
}
}


VarDeclNode vardecl(RecoverySet g) throws ParseEOFException :
{
Token t1 = null, t2;
int k = 0;
ListNode l = null;
}
{
try {
   ( t1 = <INTEGER> |  t1 = <STRING> | t1 = <IDENT> )
   t2 = <IDENT> ( <LBRACKET> <RBRACKET> { k++; } )*
     { l = new ListNode(new VarNode(t2, k)); }
   (<COMMA> { k = 0; }  t2 = <IDENT> ( <LBRACKET> <RBRACKET> { k++; })*
     { l.add(new VarNode(t2, k)); }
   )*
  { return new VarDeclNode(t1, l); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "vardecl");
   return new VarDeclNode(t1, l);
}
}


ConstructDeclNode constructdecl(RecoverySet g) throws ParseEOFException :
{
Token t = null;
MethodBodyNode m = null;
}
{
try {
    t = <CONSTRUCTOR> m = methodbody(g)
       { return new ConstructDeclNode(t, m);}
}
catch (ParseException e)
{
   consumeUntil(g, e, "constructdecl");
   return new ConstructDeclNode(t, m);
}
}

MethodDeclNode methoddecl(RecoverySet g) throws ParseEOFException :
{
Token t1 = null,
      t2 = null;
int k = 0;
MethodBodyNode m = null;
}
{
try {
   ( t1 = <INTEGER> |  t1 = <STRING> | t1 = <IDENT> )
   (<LBRACKET> <RBRACKET> { k++; } )*
   t2 = <IDENT> m = methodbody(g)
      { return new MethodDeclNode(t1, k, t2, m); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "methoddecl");
   return new MethodDeclNode(t1, k, t2, m);
}
}

MethodBodyNode methodbody(RecoverySet g) throws ParseEOFException :
{
Token t1 = null;
ListNode l = null;
StatementNode s = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    t1 = <LPAREN> l = paramlist(f) <RPAREN> s = statement(g)
      { return new MethodBodyNode(t1, l, s); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "methodbody");
   return new MethodBodyNode(t1, l, s);
}
}


ListNode paramlist(RecoverySet g) throws ParseEOFException :
{
ListNode p = null, q = null;
int k = 0;
Token t1 = null;
Token t2 = null;
}
{
try {
   [
    ( t1 = <INTEGER> |  t1 = <STRING> | t1 = <IDENT>) t2 = <IDENT>
    (<LBRACKET> <RBRACKET> { k++; } )*
       {
         q = new ListNode(new VarNode(t2, k));
     p = new ListNode(new VarDeclNode(t1, q));
       }
    (   <COMMA> {k = 0;}  ( t1 = <INTEGER> |  t1 = <STRING> | t1 = <IDENT>)
        t2= <IDENT> (<LBRACKET> <RBRACKET> {k ++;} )*
       {
         q = new ListNode(new VarNode(t2, k));
         p.add(new VarDeclNode(t1, q));
       }
    )*
   ] { return p;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "paramlist");
   return null;
}
}



StatementNode statement(RecoverySet g) throws ParseEOFException :
{
StatementNode s = null;
ListNode l;
Token t1 = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
try {

(
    LOOKAHEAD(<IDENT> <IDENT>)
    s = vardecl(f1) <SEMICOLON>
|
    LOOKAHEAD(1)
    s = atribstat(f1) <SEMICOLON>
|
    s = vardecl(f1) <SEMICOLON>
|
    s = printstat(f1) <SEMICOLON>
|
    s = readstat(f1) <SEMICOLON>
|
    s = returnstat(f1) <SEMICOLON>
|
    s = superstat(f1) <SEMICOLON>
|
    s = ifstat(g)
|
    s = forstat(g)
|
    t1 = <LBRACE> l = statlist(f2) <RBRACE> { s = new BlockNode(t1, l); }
|
    t1 = <BREAK> <SEMICOLON> { s = new BreakNode(t1);}
|
    t1 = <SEMICOLON> { s = new NopNode(t1); }
)  {return s;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "statement");
   return new NopNode(t1);
}
}


AtribNode atribstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t1 = null;

RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
try {
    e1 = lvalue(f1) t1 = <ASSIGN>
    ( e2 = alocexpression(g) | e2 = expression(g))
    { return new AtribNode(t1, e1, e2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "atribstat");
   return new AtribNode(t1, e1, e2);
}
}

PrintNode printstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <PRINT> e1 = expression(g)
      { return new PrintNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "printstat");
   return new PrintNode(t, e1);
}
}


ReadNode readstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <READ> e1 = lvalue(g)
      { return new ReadNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "readstat");
   return new ReadNode(t, e1);
}
}

ReturnNode returnstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
Token t = null;
}
{
try {
    t = <RETURN> [ e1 = expression(g)]
      { return new ReturnNode(t, e1); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "returnstat");
   return new ReturnNode(t, e1);
}
}


SuperNode superstat(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
Token t = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <SUPER> <LPAREN> l = arglist(f) <RPAREN>
      { return new SuperNode(t, l); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "superstat");
   return new SuperNode(t, l);
}
}

IfNode ifstat(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null;
StatementNode s1 = null,
              s2 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
}
{
try {
    t = <IF> <LPAREN> e1 = expression(f1) <RPAREN> s1 = statement(f2)
    [LOOKAHEAD(1) <ELSE> s2 = statement(g)]
     { return new IfNode(t, e1, s1, s2); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "ifstat");
   return new IfNode(t, e1, s1, s2);
}
}



ForNode forstat(RecoverySet g) throws ParseEOFException :
{
AtribNode s1 = null,
          s2 = null;
StatementNode s3 = null;
ExpreNode e1 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
}
{
try {
    t = <FOR> <LPAREN> [s1 = atribstat(f1)] <SEMICOLON>
                   [e1 = expression(f1)] <SEMICOLON>
                   [s2 = atribstat(f2)] <RPAREN>
                    s3 = statement(g)
   { return new ForNode(t, e1, s1, s2, s3); }
}
catch (ParseException e)
{
   consumeUntil(g, e, "forstat");
   return new ForNode(t, e1, s1, s2, s3);
}
}

ListNode  statlist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
StatementNode s = null;

RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
   s = statement(f) [ l = statlist(g)]
    { return new ListNode(s, l); }
}

ExpreNode lvalue(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null,
          e2 = null;
Token t1 = null,
      t2 = null;
ListNode l = null;
}
{
try {
   t1 = <IDENT> { e1 = new VarNode(t1); }
   (
       t1 = <LBRACKET> e2 = expression(null) <RBRACKET>
         { e1 = new IndexNode(t1, e1, e2); }
   |
       LOOKAHEAD(3)
       t1 = <DOT> t2 = <IDENT> <LPAREN> l = arglist(null) <RPAREN>
         { e1 = new CallNode(t1, e1, t2, l); }
   |
       t1 = <DOT> t2 = <IDENT>
         { e1 = new DotNode(t1, e1, t2); }
   )*
   { return e1;}
}
catch (ParseException e)
{
   consumeUntil(g, e, "lvalue");
   return new VarNode(t1);
}
}


ExpreNode alocexpression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null,
          e2 = null;
ListNode l = null;
Token t1, t2;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(RBRACKET).union(g);
}
{
    t1 = <NEW>
    (
      LOOKAHEAD(2) t2 = <IDENT> <LPAREN> l = arglist(f1) <RPAREN>
         { e1 = new NewObjectNode(t1, t2, l); }
|
      ( t2 = <INTEGER> | t2 = <STRING> | t2 = <IDENT> )
      (<LBRACKET> e2 = expression(f2) <RBRACKET>
              {
                if ( l == null )
                   l = new ListNode(e2);
                else
                   l.add(e2);
              }
       )+
          { e1 = new NewArrayNode(t1, t2, l); }
    )
    { return e1; }
}


ExpreNode expression(RecoverySet g) throws ParseEOFException :
{
ExpreNode e1 = null, e2 = null;
Token t = null;

}
{
try {
    e1 = numexpr()
    [
      ( t = <LT> | t = <GT> | t = <LE> | t = <GE> | t = <EQ> | t = <NEQ>)
      e2 = numexpr()
        { e1 = new RelationalNode(t, e1, e2); }
    ]
    { return e1; }
}
catch (ParseException e)
{
   consumeUntil(g, e, "expression");
   return new RelationalNode(t, e1, e2);
}
}


ExpreNode numexpr() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = term()
    (
       (t = <PLUS> | t = <MINUS>)
       e2 = term()
         { e1 = new AddNode(t, e1, e2); }
    )*
    {return e1; }
}

ExpreNode term() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
    e1 = xorexpr()
    (
       ( t = <MULTIPLY> | t = <DIVIDE>| t = <REM>)
       e2 = xorexpr()
         { e1 = new MultNode(t, e1, e2); }
    )*
    { return e1; }
}

ExpreNode xorexpr() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
	e1 = andexpr()
	(
	    ( t = <XOR> | t = <OR> )
	    e2 = andexpr()
	    { e1 = new MultNode(t, e1, e2); }
	)*
	{ return e1; }
}

ExpreNode andexpr() throws ParseEOFException :
{
ExpreNode e1 = null, e2;
Token t;
}
{
	e1 = notexpr()
	(
	 ( t = <AND> )
	e2 = notexpr()
	{ e1 = new MultNode(t, e1, e2); }
	)*
	{ return e1; }
}

ExpreNode notexpr() throws ParseEOFException :
{
ExpreNode e;
Token t = null;
}
{
	[( t = <NOT>)] e = unaryexpr()
	{ return e; }
}

ExpreNode unaryexpr() throws ParseEOFException :
{
ExpreNode e;
Token t = null;
}
{
   [( t = <PLUS> | t = <MINUS>)] e = factor()
   { return ( (t == null) ? e : new UnaryNode(t, e));}
}


ExpreNode factor() throws ParseEOFException :
{
ExpreNode e = null;
Token t;
}
{
    (
       t = <integer_constant> { e = new IntConstNode(t); }
    |
       t = <string_constant> { e = new StringConstNode(t); }
    |
       t = <null_constant> { e = new NullConstNode(t); }
    |
       e = lvalue(null)
    |
       <LPAREN> e = expression(null) <RPAREN>
    )
    { return e; }
}

ListNode arglist(RecoverySet g) throws ParseEOFException :
{
ListNode l = null;
ExpreNode e = null;

RecoverySet f =  new RecoverySet(COMMA).union(g);
}
{
    [
       e = expression(f)
          { l = new ListNode(e); }
       (<COMMA> e = expression(f)
          { l.add(e);}
       )*
    ]
    { return l;}
}

ListNode program() throws ParseEOFException:
{
    RecoverySet g = First.program;
    ListNode l = null, d = null;
}
{
<EOF> {return null;}
|
(    l = classlist(g)
    try {
      <EOF> {return l;}
    }
    catch (ParseException e)
    {
       consumeUntil(g, e, "program");
     }
   [ d = program() ]
) { return l;}

}
